// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  name  String
  role UserRole
  password String
  profileImg String?
  address String?
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  Booking Booking[]
}

enum UserRole {
  USER
  ADMIN
}

model Room {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
 name   String
 capacity Int
 amenities String[]
 bookings Booking[]
 createdAT DateTime @default(now())
 updatedAT DateTime @updatedAt
 Slots Slots[]
}

model Booking{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  slotId String @db.ObjectId
  slots Slots? @relation(fields: [slotId], references: [id])
  userId String @db.ObjectId
  room Room @relation(fields: [roomId], references: [id])
  roomId String @db.ObjectId
  title String
  description String
  date String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Slots{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  room Room @relation(fields: [roomId], references: [id])
  roomId String @db.ObjectId
  date String
  isBooked Boolean @default(false)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  Booking Booking[]
}
